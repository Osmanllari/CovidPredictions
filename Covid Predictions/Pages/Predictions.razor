@page "/predictions"
@using Covid_Predictions.Component
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text;
@inject IJSRuntime JSRuntime

<PageTitle>Predict Covid Cases</PageTitle>

<h1 style="color: white">Covid Case Prediction</h1>

<div class="row">
    <div class="col-md-4">

        <Card Width="23em" Height="30em">
            <Body>
                <h5 class="card-title mb-4">Select the European Country</h5>
                <div class="form-group">
                    <label for="countryDropdown">Country:</label>
                    <br>
                    <select class="form-control" @onchange="OnCountrySelected" id="countryDropdown">
                        <option value="">Select a country</option>
                        @foreach (var country in Countries)
                        {
                            <option value="@country.Name">@country.Name</option>
                        }
                    </select>
                </div>
                <br>
                <div class="form-group">
                    <label for="isoCodeInput">ISO Code:</label>
                    <input type="text" class="form-control" id="isoCodeInput" @bind="IsoCode" readonly />
                </div>
                <br>
                <div class="form-group">
                    <label for="populationInput">Population:</label>
                    <input type="text" class="form-control" id="populationInput" @bind="Population" readonly />
                </div>
            </Body>
        </Card>
    </div>

    <div class="col-md-8">
        <Card Width="35em" Height="24em">
            <Body>
                <h5 class="card-title">Select the Time Period</h5>

                <div class="date-format-group">
                    <label for="dateInput">Select a date:</label>
                    <input type="date" class="form-control" id="dateInput"
                           @bind="SelectedDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" max="2030-12-31" />
                </div>
                <br />
                <div>
                    @if (!string.IsNullOrEmpty(predictionResult))
                    {
                        <p class="estimation">Estimated Covid Cases:</p>
                        <br />
                        <p class="prediction">@Math.Round(Convert.ToDouble(predictionResult))</p>
                    }
                </div>
            </Body>
        </Card>
        <br />
        <Card Width="35em" Height="4.5em">
            <Body>
                <div class="mt-auto d-flex justify-content-between">
                    <button type="button" class="btn btn-primary" @onclick="GetPredictionsAsync" disabled="@string.IsNullOrWhiteSpace(SelectedCountry)">
                        Predict <span class="oi oi-check" aria-hidden="true"></span>
                    </button>
                    <button type="button" class="btn btn-primary mx-3" onclick="@(() => ResetSelections())">
                        Reset <span class="oi oi-reload" aria-hidden="true"></span>
                    </button>
                    <button type="button" class="btn btn-primary">
                        Save <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                    </button>
                </div>
            </Body>
        </Card>
    </div>
</div>

@code {
    private string? SelectedCountry { get; set; } = "";
    private string IsoCode { get; set; } = "";
    private int Population { get; set; }
    private DateTime SelectedDate { get; set; } = DateTime.Today;

    protected override void OnInitialized()
    {
        // Prevent selecting past dates
        if (SelectedDate < DateTime.Today)
        {
            SelectedDate = DateTime.Today;
        }
    }

    private async void ResetSelections()
    {
        SelectedCountry = "";
        IsoCode = "";
        Population = 0;
        SelectedDate = DateTime.Today;
        predictionResult = "";
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('countryDropdown').value = '';");
    }


    public class Country
    {
        public string Name { get; set; }
        public string IsoCode { get; set; }
        public int Population { get; set; }

        public Country(string name, string isoCode, int population)
        {
            Name = name;
            IsoCode = isoCode;
            Population = population;
        }
    }

    private void OnCountrySelected(ChangeEventArgs e)
    {
        var selectedCountry = e.Value?.ToString();
        var country = Countries.FirstOrDefault(c => c.Name == selectedCountry);
        if (country != null)
        {
            SelectedCountry = country.Name;
            IsoCode = country.IsoCode;
            Population = country.Population;
        }
        else
        {
            SelectedCountry = "";
            IsoCode = "";
            Population = 0;
        }
    }

    private Country[] Countries = new Country[]
{
        new Country("Albania", "ALB", 2842318),
        new Country("Andorra", "AND", 79843),
        new Country("Austria", "AUT", 8939617),
        new Country("Belarus", "BLR", 9534956),
        new Country("Belgium", "BEL", 11655923),
        new Country("Bosnia and Herzegovina", "BIH", 3233530),
        new Country("Bulgaria", "BGR", 6781955),
        new Country("Croatia", "HRV", 4030361),
        new Country("Cyprus", "CYP", 896007),
        new Country("Czechia", "CZE", 10493990),
        new Country("Denmark", "DNK", 5882259),
        new Country("Estonia", "EST", 1326064),
        new Country("Finland", "FIN", 5540745),
        new Country("France", "FRA", 67813000),
        new Country("Germany", "DEU", 83369840),
        new Country("Greece", "GRC", 10384972),
        new Country("Hungary", "HUN", 9967304),
        new Country("Iceland", "ISL", 372903),
        new Country("Ireland", "IRL", 5023108),
        new Country("Italy", "ITA", 59037472),
        new Country("Latvia", "LVA", 1850654),
        new Country("Liechtenstein", "LIE", 39355),
        new Country("Lithuania", "LTU", 2750058),
        new Country("Luxembourg", "LUX", 647601),
        new Country("Malta", "MLT", 533293),
        new Country("Moldova", "MDA", 3272993),
        new Country("Monaco", "MCO", 36491),
        new Country("Montenegro", "MNE", 627082),
        new Country("Netherlands", "NLD", 17564020),
        new Country("North Macedonia", "MKD", 2093606),
        new Country("Norway", "NOR", 5434324),
        new Country("Poland", "POL", 39857144),
        new Country("Portugal", "PRT", 10270857),
        new Country("Romania", "ROU", 19659270),
        new Country("Russia", "RUS", 144713312),
        new Country("San Marino", "SMR", 33690),
        new Country("Serbia", "SRB", 6871547),
        new Country("Slovakia", "SVK", 5643455),
        new Country("Slovenia", "SVN", 2119843),
        new Country("Spain", "ESP", 47558632),
        new Country("Sweden", "SWE", 10549349),
        new Country("Switzerland", "CHE", 8740471),
        new Country("Ukraine", "UKR", 39701744),
        new Country("United Kingdom", "GBR", 67508936)
    };

    private string? predictionResult;

    private async Task GetPredictionsAsync()
    {
        try
        {
            // Set up the HTTP client
            const string apiKey = "s5GxetTYeKJeNDeR0H4lAf6yXac0ldlg";
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);

            // Construct the input data payloads
            var inputObjects = new[]
            {
            new
                {
                    iso_code = IsoCode,
                    location = SelectedCountry,
                    date = SelectedDate.ToString("yyyy-MM-dd HH:mm:ss"),
                    population = Population
                }
            };

            var payload = JsonSerializer.Serialize(new
            {
                Inputs = new
                {
                    input1 = inputObjects
                },
                GlobalParameters = new { }
            });

            var content = new StringContent(payload, Encoding.UTF8, "application/json");

            // Send the HTTP request and get back the prediction result
            var response = await client.PostAsync("http://20.22.70.70:80/api/v1/service/covidendpoint02/score", content);
            var result = await response.Content.ReadAsStringAsync();

            try
            {
                JsonDocument jsonDoc = JsonDocument.Parse(result);
                JsonElement root = jsonDoc.RootElement;
                JsonElement resultsElement;

                if (root.TryGetProperty("Results", out resultsElement))
                {
                    JsonElement webServiceOutput0Element;
                    if (resultsElement.TryGetProperty("WebServiceOutput0", out webServiceOutput0Element) && webServiceOutput0Element.ValueKind == JsonValueKind.Array)
                    {
                        JsonElement scoredLabelsElement;
                        if (webServiceOutput0Element[0].TryGetProperty("Scored Labels", out scoredLabelsElement))
                        {
                            predictionResult = scoredLabelsElement.GetRawText();
                            Console.WriteLine(predictionResult);
                        }
                    }
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error deserializing response: {ex.Message}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing Azure ML service: {ex.Message}");
        }
    
    }

}
